// Mocks generated by Mockito 5.1.0 from annotations
// in abelha_modas/test/domain/use_cases_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:abelha_modas/domain/entities.dart' as _i2;
import 'package:abelha_modas/domain/use_cases.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCustomer_0 extends _i1.Fake implements _i2.Customer {}

class _FakeAddress_1 extends _i1.Fake implements _i2.Address {}

class _FakeCategory_2 extends _i1.Fake implements _i2.Category {}

/// A class which mocks [RegisterCustomer].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterCustomer extends _i1.Mock implements _i3.RegisterCustomer {
  MockRegisterCustomer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Customer> registerCustomer(_i2.Customer? customer) =>
      (super.noSuchMethod(Invocation.method(#registerCustomer, [customer]),
              returnValue: Future<_i2.Customer>.value(_FakeCustomer_0()))
          as _i4.Future<_i2.Customer>);
}

/// A class which mocks [Customer].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomer extends _i1.Mock implements _i2.Customer {
  MockCustomer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get cpf =>
      (super.noSuchMethod(Invocation.getter(#cpf), returnValue: '') as String);
  @override
  set cpf(String? _cpf) => super.noSuchMethod(Invocation.setter(#cpf, _cpf),
      returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  String get phoneNumber =>
      (super.noSuchMethod(Invocation.getter(#phoneNumber), returnValue: '')
          as String);
  @override
  set phoneNumber(String? _phoneNumber) =>
      super.noSuchMethod(Invocation.setter(#phoneNumber, _phoneNumber),
          returnValueForMissingStub: null);
  @override
  set email(String? _email) =>
      super.noSuchMethod(Invocation.setter(#email, _email),
          returnValueForMissingStub: null);
  @override
  _i2.Address get address => (super.noSuchMethod(Invocation.getter(#address),
      returnValue: _FakeAddress_1()) as _i2.Address);
  @override
  set address(_i2.Address? _address) =>
      super.noSuchMethod(Invocation.setter(#address, _address),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchCustomer].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCustomer extends _i1.Mock implements _i3.SearchCustomer {
  MockSearchCustomer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Customer>> searchCustomerBy(
          String? searchBy, String? searchFor) =>
      (super.noSuchMethod(
              Invocation.method(#searchCustomerBy, [searchBy, searchFor]),
              returnValue: Future<List<_i2.Customer>>.value(<_i2.Customer>[]))
          as _i4.Future<List<_i2.Customer>>);
}

/// A class which mocks [CreateCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateCategory extends _i1.Mock implements _i3.CreateCategory {
  MockCreateCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Category> createCategory(_i2.Category? category) =>
      (super.noSuchMethod(Invocation.method(#createCategory, [category]),
              returnValue: Future<_i2.Category>.value(_FakeCategory_2()))
          as _i4.Future<_i2.Category>);
}
